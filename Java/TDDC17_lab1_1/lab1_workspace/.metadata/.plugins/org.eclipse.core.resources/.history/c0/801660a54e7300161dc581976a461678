package tddc17;

import java.util.*;


public class DecisionMaker {
	private int [] surroundings;
	private int[][] map;
	private int xpos;
	private int ypos;
	private Random rand = new Random();
	private Boolean bump;
	private Boolean deadEnd;
	private final int ACTION_NONE 			= 0;
	private final int ACTION_MOVE_FORWARD 	= 1;
	private final int ACTION_TURN_RIGHT 	= 2;
	private final int ACTION_TURN_LEFT 		= 3;
	private final int ACTION_SUCK	 		= 4;
	private final int [] dodgeObstacle = new int[] {ACTION_TURN_RIGHT,ACTION_MOVE_FORWARD,ACTION_TURN_LEFT};
	private final int [] uTurn = new int[] {ACTION_TURN_RIGHT,ACTION_TURN_RIGHT};
	private final int[] turnLeft= new int[] {ACTION_TURN_LEFT,ACTION_MOVE_FORWARD};
	private final int[] turnRight= new int[] {ACTION_TURN_RIGHT,ACTION_MOVE_FORWARD};
	private final int[] goForward= new int[] {ACTION_MOVE_FORWARD};
	private Queue traceBack = new Queue();
	
	
	DecisionMaker(){
		this.surroundings = new int [] {0,0,0,0};
	}
	public void updateSurroundings(int[] surroundings,int[][] map,Boolean bump, int xpos, int ypos, int dir){
		this.surroundings = surroundings;
		this.bump=bump;
		this.map=map;
		this.xpos = xpos;
		this.ypos = ypos;
		if(bump && !hasMultiplePaths()){
			this.deadEnd = true;
		}
	}
	public int [] getDecision(){
		
		//If we have unexplored squares nearby, explore them.
		if(hasMultiplePaths()){
			deadEnd=false;
		}
		if(surroundings[3]==0){
			return turnLeft;
		}
		else if(surroundings[0]==0){
			return goForward;
		}
		else if(surroundings[1]==0){
			return turnRight;
		}
		else if(surroundings[2]==0){
			return uTurn;
		}
		else if(!deadEnd && bump){
			deadEnd=true;
			return uTurn;
		}
		else if(deadEnd){
			int tmp = rand.nextInt(2);
			if(tmp==0){
				
				if(surroundings[1]!=1){
					return turnRight;
				}
				else if(surroundings[0]!=1){
					return goForward;
				}
				else if(surroundings[3]!=1){
					 return turnLeft;
				}
				
			}
			else{
				if(surroundings[0]!=1){
					return goForward;
				}
				else if(surroundings[3]!=1){
					 return turnLeft;
				}
				else if(surroundings[1]!=1){
					return turnRight;
				}
				
			}
			if(bump){
				tmp = rand.nextInt(2);
				if(tmp==1){
					return turnRight;
				}
				else{
					return turnLeft;
				}
			}
			
		}
		else{
			return goForward;
		}
		return goForward;
		
		
	}
	public Boolean hasMultiplePaths(){
		int counter = 0;
		if(surroundings[3]==0){
			counter++;
		}
		if(surroundings[0]==0){
			counter++;
		}
		if(surroundings[1]==0){
			counter++;
		}
		if(surroundings[2]==0){
			counter++;
		}
		if(counter>1){
			return true;
		}
		else{
			return false;
		}
		
	}
	public Boolean isUnexplored(){
		for(int i=1;i<16;i++){
			for(int j=1;j<16;j++){
				if(map[i][j]==0){
					if(map[i+1][j]!=1 && map[i-1][j]!=1 && map[i][j+1]!=1 && map[i][j-1]!=1){
						return true;
					}
				}
			}
		}
		return false;
	}
	public int[] wayFinder(){
		int[][] costMap = new int[30][30];
		
		
		for(int i=0;i<30;i++){
			for(int j=0;j<30;j++){
				costMap[i][j]=100;
			}
		}
		costMap[xpos][ypos]=0;
		
		for(int i=1;i<29;i++){
			for(int j=1;j<29;j++){
					int least = costMap[i][j];
					if((least > costMap[i+1][j]+1) && (map[i][j] != 1)){
						costMap[i][j]=costMap[i+1][j]+1;
					}
					if((least > costMap[i-1][j]+1) && (map[i][j] != 1)){
						costMap[i][j]=costMap[i-1][j]+1;
					}
					if((least > costMap[i][j+1]+1) && (map[i][j] != 1)){
						costMap[i][j]=costMap[i][j+1]+1;
					}
					if((least > costMap[i][j-1]+1) && (map[i][j] != 1)){
						costMap[i][j]=costMap[i][j-1]+1;
					}
			}
		}
		
		int cost = costMap[1][1];
		int[][] path = new int[cost+1][2];
		int lastx = 1;
		int lasty = 1;
		path[cost][0]=1; //home
		path[cost][1]=1;
		for(int i = cost-1; i>0 ;i--){
			if(costMap[lastx][lasty]+1==costMap[lastx-1][lasty]){
				path[i][0]=lastx-1;
				path[i][1]=lasty;
				lastx=lastx-1;
			}
			if(costMap[lastx][lasty]+1==costMap[lastx+1][lasty]){
				path[i][0]=lastx+1;
				path[i][1]=lasty;
				lastx=lastx+1;
			}
			if(costMap[lastx][lasty]+1==costMap[lastx][lasty-1]){
				path[i][0]=lastx;
				path[i][1]=lasty-1;
				lasty=lasty-1;
			}
			if(costMap[lastx][lasty]+1==costMap[lastx][lasty+1]){
				path[i][0]=lastx;
				path[i][1]=lasty+1;
				lasty=lasty+1;
			}
			
			
		}
		path[0][0]=xpos;
		path[0][1]=ypos;
		for(int i=0; i<cost+1;i++){
			for(int j=0;j<2;j++){
				System.out.println(path[i][j]+"\n");
			}
		}
		return new int[]{3};
	}
	
	
}
